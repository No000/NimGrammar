# Nimのチュートリアルのパート1
# Nim ver 1.0.4
# 基本的な知識が前提なので、未経験者はNimBasicsから
#===================================================================================
# イントロダクション
# 全てのコードはNimstyleguide(https://nim-lang.org/docs/nep1.html)に従い書かれている

#====================================================================================
# 最初のプログラミング
# This is comment
echo "What's your name?"
var name : string = readLine(stdin)

echo "Hi", name, '!'
# readLine関数やecho関数は、暗黙的にインポートされるシステムモジュールに属している
#====================================================================================
# コンパイル方法
# nim compile --run filename.nim
# compileはC言語を経由してクロスコンパイルを行う
# その際のｃコンパイラの指定はfilename.cfg.nimファイルで指定できる
# --runはコンパイルと同時に実行を行うオプション
# -rと省略することができる

# 引数の指定
# nim c -r filename.nim arg1 arg2

# リリースバージョンをコンパイルする方法
# nim c -d:release filename.nim
# このオプションによりランタイムチェックがオフとなり、最適化オプションがONとなる
#====================================================================================
# Nimの字句要素は（文字列）リテラル、識別子、キーワード、コメント、演算子、その他の句読点
# により構成されるいる
# 文字列リテラルは二重引用符("")、文字リテラルは単一引用符('')に囲まれている
# 三個の二重引用符"""..."""で、複数行（エスケープ文字を無視）の記述ができる
echo """
sdc
sdcasdc
"""
# HTML文の埋め込みとかに便利

#====================================================================================
# コメント
# 1行の通常のコメントは#を1文字、行頭に配置する
# ドキュメンテーションコメントは##のように、2文字で表す
# ドキュメンテーションコメントとはjavadocのように、ドキュメントを作成する際に利用されるコメント
#-------------------------------------------------------------------------------------------
# 複数行のコメント
# 複数行にわたるコメントは#[]#の中に記述する.

#[
  Nim
  is
  very
  useful
]#

#[
  csadc
  #[
    ネストすることもできる
  ]#
]#

#=================================================================================================
# 数値
# 読みやすくするために_(アンダーバーを使用することができる)
# 浮動小数点のリテラルとしてeかEを使用できる。.10e9
# 先頭に16進数：0x, 2進数：0b,8進数：0o

#=================================================================================================
# var宣言
# var宣言により、新しいローカル変数またはグローバル変数を宣言することができる
# インデントを利用することにより、まとめることができる

var
  x, y : int
  # 間にコメントを挟むことができる
  a, b, c :string

#=================================================================================================
# 割り当てステートメント
# いまいちピンとこないが、代入演算子の説明になっているのだと思う
# varだといつでも変更が可能な変数なため使い方に注意
var
  a ,b : int = 3
echo a, b
a = 12
echo a, b
#=================================================================================================
# constans
# 定数宣言は、constで宣言を行う
# 定数の値は変更することができず、コンパイル時に評価できる必要がある
# 要は標準入力を入れる器とは使えず、コンパイル時に何らかの数値を入れておく必要がある

const
  x = 1
  # ここにもコメントをかけるよ！
  a = 1
  z = a + 1 # これはコンパイルが通る！

#=================================================================================================
# let宣言
# let宣言は、var宣言のように動くことができるが、一回でも値を入れてしまうと変更ができなくなる

let
  a = 12

# constとの違いを書くなら
const input = readLine(stdin) # これは怒られる
let input = readLine(stdin) # これはOK

#=================================================================================================
# 制御構文
# if文
let name = readLine(stdin)

if name == "" :   # ""は空文字
  echo "名無しなのかい？"
elif name = "名前" :
  echo == "名前が名無しなのは草"
else:
  echo "Hi", name, "!"
#-------------------------------------------------------------------------------------------------
# case文
# コンマ区切りや範囲での条件の設定ができる
# case文は基本何らかの条件を通さないとエラーになるが、
# elseを使うことにより、条件に当てはまらなかった場合の処理をかける
case a
of 1:
  echo "a = 1"
of 1,2,4:
  echo "a = 1,2,4"
of 1..8 :
  echo "a = 1~8"
else: discard
# discardを利用することにより、breakのように何もしない処理をかける
#------------------------------------------------------------------------------------------------
# While文
# 単純なループ文、よく無限ループで聞くやつ
echo "What's your name?"
var name = readLine(stdin)
while name == "":
  echo "Please your name?"
  name = readLine(stdin)
echo name
#-----------------------------------------------------------------------------------------------
# For文
# for文は、組み込み関数以外はPyhtonと特に違いはない
echo "Counting to ten"
for i in countup(1, 11):    # 変数iは暗黙的に宣言されている
  echo i
# countup関数は組み込み関数で、指定の範囲を数え上げて行きます。
# 類似コードとして
echo "Counting to 10 :"
var i = 1
while i <= 10:
  echo i
  inc(i)

# カウントダウンしながらループするには、組み込み関数countdownを利用できる
# あんまつかわない…？
echo "Coundown down from 10 to 1 :"
for i in countdown(10..1):
  echo i

# カウントアップ関数をいっつも使うのはだるいので、短く済ませれるイテレータがある
# <数値>..<数値>である
for i in 1..10 :
  echo i
