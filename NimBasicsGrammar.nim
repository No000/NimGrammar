# 文法をまとめたものなので実行してもエラーが出るので注意
# <>は変更可能なもの

# 実行方法:nim c -r filename.nim

# ハローワールド
echo "hello world"

# 変数宣言
# キャメルケースとスネークケースをサポート
# キャメルケース：NimMain（大文字に注目）
# スネークケース：nim_main（アンダーバーに注目）
# Nimのライブラリの関数等はキャメルケースで書かれているのでキャメルケースの方がおすすめ

# var name : <型>
var name : int

# 変数宣言+代入
# var <name> : <型> = <値>
var name : int = 10

# 型推論使用時
# var <name> = <値>
var name = 10

# 連続した変数の宣言
#[
  var
    <name> = <値>
    <name> = <値>
    ]#
# インデントはTabではなくスペース2文字
var
  name1 = 10
  name2 = "aidcnsd"

# 変数宣言のキーワードは三種類ある
#var:変数としていつでも変更することができる（カウンタとか？）
#let:最初は空でも問題ないが、一度でも値をセットすると変更ができない（計算結果等）
#const:最初から値が入っていなければならず、変更もできない（一番使う）

# 整数
# 数値の可読化向上に_をサポート
# a = 100_000
let a = 100_000
let a = 0x1abc_abcd

# 計算用の演算子(+,-,*,/,div,mod)をサポート
# div:小数点切り捨て除算 mod:除算による余剰

# 浮動小数点
# (2.73,-3.14,5.0,4e7)等
# 4e7 = 4 * 10 ^7
echo 4e7

# 文字
# char型はASCⅡ文字を一文字を表すのに使用する
# 単一引用符'を使用し'A'のように書く、使用できるのは文字、記号、1桁の数字（1バイト）
let
  h = 'A'
  g = '1'
  i = '+'
# 文字列は他の言語と同様に二重引用符"でくくる
let
  a = "ABC"
  b = "" # 空文字
  c = " I study nim"
# 特殊文字も、マニュアルに詳しいことは書いてあるが、基本は多言語と同じ
echo "Nim\nstudy\t."
# rを二重引用符に前に入れることで特殊文字を無視することができる
echo r"Nim\\is\t\n"
# Nimの文字列は可変であるにで、内容を変えることができる
# add関数を使うと、既存の文字列に、別の文字列や単一の文字の追加を行える
var # 文字列をいじるので
  a = "Nim"
  b = "study"
echo a.add(" study")
echo a.add(b)
# 元の文字列をそのままにして、結果のみ変更する場合&演算子を利用する
let
  a = "Nim"
  b = "Study"

echo "結果は",a & b

# ブーリアン
# ブーリアン型は他の言語同様、TrueかFalseを返す
# 関係演算子の結果（==,!=,>,<=,>=,<,）
let
  a = 12
  b = 1
echo a == b
echo a != b
# 文字や文字列の比較も可能
# （大文字は小文字の前に来る、同一以外は文字列の長さは関係ない、短い文字列は長い文字列より小さくなる）
# 文字列比較は文字ごとに行う
